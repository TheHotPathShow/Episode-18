using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace MakeQueryable.Tests;

public class SampleIncrementalSourceGeneratorTests
{
    private const string VectorClassText = @"
namespace Generators
{
    [System.AttributeUsage(System.AttributeTargets.Class)]
    public class ReportAttribute : System.Attribute
    {
    }
}

[Generators.Report]
public partial class Vector3
{
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}";

    private const string ExpectedGeneratedClassText = @"// <auto-generated/>
namespace Generators
{
    static class ReportExtensions
    {
        public static global::System.Collections.Generic.IEnumerable<string> Report(this global::Vector3 self)
        {
            yield return $""X: {self.X}"";
            yield return $""Y: {self.Y}"";
            yield return $""Z: {self.Z}"";
        }
    }
}
";

    [Fact]
    public void GenerateReportMethod()
    {
        // Create an instance of the source generator.
        var generator = new SampleIncrementalSourceGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(SampleIncrementalSourceGeneratorTests),
            new[] { CSharpSyntaxTree.ParseText(VectorClassText) },
            new[]
            {
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            });

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("Report.Vector3.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(ExpectedGeneratedClassText, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
}